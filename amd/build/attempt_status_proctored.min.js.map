{"version":3,"sources":["../src/attempt_status_proctored.js"],"names":["define","$","str","ajax","Log","init","cm","exam_refresh_rate","parseInt","attempt_proctored_internal","setInterval","get_attempt_proctored","promises","call","methodname","args","instance","done","response","status","get_strings","component","attempt_status_string","display_hybrid_question_status","clearInterval","display_qrsub_attempt_status","addClass","fail","info","e","text","html"],"mappings":"AAwBCA,OAAM,wCAAC,CAAC,QAAD,CAAW,UAAX,CAAuB,WAAvB,CAAoC,UAApC,CAAD,CACH,SAASC,CAAT,CAAYC,CAAZ,CAAiBC,CAAjB,CAAuBC,CAAvB,CAA4B,CAE5B,MAAO,CAOHC,IAAI,CAAE,cAASC,CAAT,CAAaC,CAAb,CAAgC,CAMlCA,CAAiB,CAAGC,QAAQ,CAACD,CAAD,CAA5B,CAGA,GAAIE,CAAAA,CAA0B,CAAGC,WAAW,CACxC,UAAY,CAAEC,CAAqB,CAACL,CAAD,CAAO,CADF,CACIC,CADJ,CAA5C,CAIA,QAASI,CAAAA,CAAT,CAA+BL,CAA/B,CAAmC,CAE/B,GAAIM,CAAAA,CAAQ,CAAGT,CAAI,CAACU,IAAL,CAAU,CAAC,CACtBC,UAAU,CAAE,+BADU,CAEtBC,IAAI,CAAE,CAAE,WAAcT,CAAE,CAACU,QAAnB,CAFgB,CAAD,CAAV,CAAf,CAMAJ,CAAQ,CAAC,CAAD,CAAR,CAAYK,IAAZ,CAAiB,SAAUC,CAAV,CAAoB,CACjC,GAAuB,YAAnB,EAAAA,CAAQ,CAACC,MAAb,CAAqC,CAGjCjB,CAAG,CAACkB,WAAJ,CAAgB,CACZ,CAAE,IAAO,gBAAT,CAA2BC,SAAS,CAAE,aAAtC,CADY,CAAhB,EAEGJ,IAFH,CAEQ,SAAUK,CAAV,CAAiC,CACrCC,CAA8B,CAACD,CAAqB,CAAC,CAAD,CAAtB,CACjC,CAJD,CAKH,CARD,IAQO,IAAuB,eAAnB,EAAAJ,CAAQ,CAACC,MAAb,CAAwC,CAG3CK,aAAa,CAACf,CAAD,CAAb,CAGAP,CAAG,CAACkB,WAAJ,CAAgB,CACZ,CAAE,IAAO,eAAT,CAA0BC,SAAS,CAAE,aAArC,CADY,CAAhB,EAEGJ,IAFH,CAEQ,SAAUK,CAAV,CAAiC,CACrCG,CAA4B,CAACH,CAAqB,CAAC,CAAD,CAAtB,CAA5B,CACAC,CAA8B,CAAC,EAAD,CAA9B,CAGAtB,CAAC,CAAC,YAAD,CAAD,CAAgByB,QAAhB,CAAyB,QAAzB,CACH,CARD,CASH,CAfM,IAeA,CAGHH,CAA8B,CAACL,CAAQ,CAACC,MAAV,CACjC,CACJ,CA7BD,EA6BGQ,IA7BH,CA6BQ,UAAY,CAChBvB,CAAG,CAACwB,IAAJ,CAAS,8BAAT,CACH,CA/BD,CAgCH,CAMD,QAASL,CAAAA,CAAT,CAAwCJ,CAAxC,CAAgD,CAC5C,GAAIU,CAAAA,CAAC,CAAG5B,CAAC,CAAC,gBAAD,CAAT,CACA,GAAI4B,CAAC,CAACC,IAAF,IAAYX,CAAhB,CAAwB,CACpBU,CAAC,CAACE,IAAF,CAAOZ,CAAP,CACH,CACJ,CAMD,QAASM,CAAAA,CAAT,CAAsCN,CAAtC,CAA8C,CAC1C,GAAIU,CAAAA,CAAC,CAAG5B,CAAC,CAAC,uBAAD,CAAT,CACA,GAAI4B,CAAC,CAACC,IAAF,IAAYX,CAAhB,CAAwB,CACpBU,CAAC,CAACE,IAAF,CAAOZ,CAAP,CACH,CACJ,CAEJ,CApFE,CAsFV,CAzFM,CAAN","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Get the status of the hybrid question within an attempt.\n *\n * @module     local_qrsub/attempt_status\n * @package    local_qrsub\n * @copyright  2021 Knowledge One Inc. {@link http://knowledgeone.ca}\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n define(['jquery', 'core/str', 'core/ajax', 'core/log'],\n    function($, str, ajax, Log) {\n\n    return {\n\n        /**\n         * Initialize the status refresh for a proctored quiz.\n         *\n         * @param obj cm The course module of the current quiz to monitor.\n         */\n        init: function(cm, exam_refresh_rate) {\n\n            ///////////////////////////////////////////////////////\n            // QRMOOD-51 - As an IT, I want the exam refresh rate to be x sec\n            //\n            // Convert the exam's refresh rate to int.\n            exam_refresh_rate = parseInt(exam_refresh_rate);\n            // QRMOOD-51.\n\n            let attempt_proctored_internal = setInterval(\n                function () { get_attempt_proctored(cm); }, exam_refresh_rate\n            );\n\n            function get_attempt_proctored(cm) {\n                // Send the new order to the server.\n                var promises = ajax.call([{\n                    methodname: 'local_qrsub_attempt_proctored',\n                    args: { 'instanceid': cm.instance }\n                }]);\n\n                // Process the server response.\n                promises[0].done(function (response) {\n                    if (response.status == 'notstarted') {\n\n                        // No attempt yet. Wait a bit more.\n                        str.get_strings([\n                            { 'key': 'no_attempt_yet', component: 'local_qrsub' }\n                        ]).done(function (attempt_status_string) {\n                            display_hybrid_question_status(attempt_status_string[0]);\n                        });\n                    } else if (response.status == 'exam_finished') {\n\n                        // Clear the interval to stop the refresh.\n                        clearInterval(attempt_proctored_internal);\n\n                        // Display the new status to the student.\n                        str.get_strings([\n                            { 'key': 'exam_finished', component: 'local_qrsub' }\n                        ]).done(function (attempt_status_string) {\n                            display_qrsub_attempt_status(attempt_status_string[0]);\n                            display_hybrid_question_status('');\n\n                            // Hide the QR Code.\n                            $(\".k1-qrcode\").addClass('d-none');\n                        });\n                    } else {\n                        // The student has started the attempt on his phone.\n                        // Get the hybrid q status and display it.\n                        display_hybrid_question_status(response.status);\n                    }\n                }).fail(function () {\n                    Log.info('get_attempt_proctored() fail');\n                });\n            } // get_attempt_proctored()\n\n            /**\n             * Update the hybrid question status.\n             * @param str status The new status to display.\n             */\n            function display_hybrid_question_status(status) {\n                let e = $(\"#hybrid_status\");\n                if (e.text() != status) {\n                    e.html(status);\n                }\n            }\n\n            /**\n             * Update the exam status.\n             * @param str status The new status to display.\n             */\n            function display_qrsub_attempt_status(status) {\n                let e = $(\"#qrsub_attempt_status\");\n                if (e.text() != status) {\n                    e.html(status);\n                }\n            }\n\n        } // init()\n    };\n});\n"],"file":"attempt_status_proctored.min.js"}