{"version":3,"sources":["../src/attempt_status_unproctored.js"],"names":["define","$","str","ajax","Log","init","attemptid","attempt_unproctored_internal","setInterval","get_attempt_status","promises","call","methodname","args","done","response","status","get_strings","component","attempt_status_string","display_hybrid_question_status","clearInterval","display_qrsub_attempt_status","hide","fail","info","e","text","html"],"mappings":"AAwBAA,OAAM,0CAAC,CAAC,QAAD,CAAW,UAAX,CAAuB,WAAvB,CAAoC,UAApC,CAAD,CACF,SAAUC,CAAV,CAAaC,CAAb,CAAkBC,CAAlB,CAAwBC,CAAxB,CAA6B,CAE7B,MAAO,CAOHC,IAAI,CAAE,cAASC,CAAT,CAAoB,CAEtB,GAAIC,CAAAA,CAA4B,CAAGC,WAAW,CAC1C,UAAY,CAAEC,CAAkB,CAACH,CAAD,CAAc,CADJ,CACM,GADN,CAA9C,CAIA,QAASG,CAAAA,CAAT,CAA4BH,CAA5B,CAAuC,CAGnC,GAAII,CAAAA,CAAQ,CAAGP,CAAI,CAACQ,IAAL,CAAU,CAAC,CACtBC,UAAU,CAAE,4BADU,CAEtBC,IAAI,CAAE,CAAE,UAAaP,CAAf,CAFgB,CAAD,CAAV,CAAf,CAMAI,CAAQ,CAAC,CAAD,CAAR,CAAYI,IAAZ,CAAiB,SAAUC,CAAV,CAAoB,CACjC,GAAuB,gBAAnB,EAAAA,CAAQ,CAACC,MAAb,CAAyC,CAGrCd,CAAG,CAACe,WAAJ,CAAgB,CACZ,CAAE,IAAO,gBAAT,CAA2BC,SAAS,CAAE,aAAtC,CADY,CAAhB,EAEGJ,IAFH,CAEQ,SAAUK,CAAV,CAAiC,CACrCC,CAA8B,CAACD,CAAqB,CAAC,CAAD,CAAtB,CACjC,CAJD,CAKH,CARD,IAQO,IAAuB,eAAnB,EAAAJ,CAAQ,CAACC,MAAb,CAAwC,CAG3CK,aAAa,CAACd,CAAD,CAAb,CAGAL,CAAG,CAACe,WAAJ,CAAgB,CACZ,CAAE,IAAO,eAAT,CAA0BC,SAAS,CAAE,aAArC,CADY,CAAhB,EAEGJ,IAFH,CAEQ,SAAUK,CAAV,CAAiC,CACrCG,CAA4B,CAACH,CAAqB,CAAC,CAAD,CAAtB,CAA5B,CACAC,CAA8B,CAAC,EAAD,CAA9B,CAGAnB,CAAC,CAAC,YAAD,CAAD,CAAgBsB,IAAhB,EACH,CARD,CASH,CAfM,IAeA,CAEHH,CAA8B,CAACL,CAAQ,CAACC,MAAV,CACjC,CACJ,CA5BD,EA4BGQ,IA5BH,CA4BQ,UAAY,CAChBpB,CAAG,CAACqB,IAAJ,CAAS,yBAAT,CACH,CA9BD,CA+BH,CAMD,QAASL,CAAAA,CAAT,CAAwCJ,CAAxC,CAAgD,CAC5C,GAAIU,CAAAA,CAAC,CAAGzB,CAAC,CAAC,gBAAD,CAAT,CACA,GAAIyB,CAAC,CAACC,IAAF,IAAYX,CAAhB,CAAwB,CACpBU,CAAC,CAACE,IAAF,CAAOZ,CAAP,CACH,CACJ,CAMD,QAASM,CAAAA,CAAT,CAAsCN,CAAtC,CAA8C,CAC1C,GAAIU,CAAAA,CAAC,CAAGzB,CAAC,CAAC,uBAAD,CAAT,CACA,GAAIyB,CAAC,CAACC,IAAF,IAAYX,CAAhB,CAAwB,CACpBU,CAAC,CAACE,IAAF,CAAOZ,CAAP,CACH,CACJ,CAEJ,CA7EE,CA+EV,CAlFK,CAAN","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Get the status of the hybrid question within an attempt.\n *\n * @module     local_qrsub/attempt_status\n * @package    local_qrsub\n * @copyright  2021 Knowledge One Inc. {@link http://knowledgeone.ca}\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/str', 'core/ajax', 'core/log'],\n    function ($, str, ajax, Log) {\n\n    return {\n\n        /**\n         * Initialize the status refresh.\n         *\n         * @param int attemptid The attempt id to get the status of.\n         */\n        init: function(attemptid) {\n\n            let attempt_unproctored_internal = setInterval(\n                function () { get_attempt_status(attemptid); }, 1000\n            );\n\n            function get_attempt_status(attemptid) {\n\n                // Send the new order to the server.\n                var promises = ajax.call([{\n                    methodname: 'local_qrsub_attempt_status',\n                    args: { 'attemptid': attemptid }\n                }]);\n\n                // Process the server response.\n                promises[0].done(function (response) {\n                    if (response.status == 'no_attempt_yet') {\n\n                        // No attempt yet. Let's wait a bit more.\n                        str.get_strings([\n                            { 'key': 'no_attempt_yet', component: 'local_qrsub' }\n                        ]).done(function (attempt_status_string) {\n                            display_hybrid_question_status(attempt_status_string[0]);\n                        });\n                    } else if (response.status == 'exam_finished') {\n\n                        // Clear the interval to stop the refresh.\n                        clearInterval(attempt_unproctored_internal);\n\n                        // Display the new status to the student.\n                        str.get_strings([\n                            { 'key': 'exam_finished', component: 'local_qrsub' }\n                        ]).done(function (attempt_status_string) {\n                            display_qrsub_attempt_status(attempt_status_string[0]);\n                            display_hybrid_question_status('');\n\n                            // Hide the QR Code.\n                            $(\".k1-qrcode\").hide();\n                        });\n                    } else {\n\n                        display_hybrid_question_status(response.status);\n                    }\n                }).fail(function () {\n                    Log.info('get_attempt_status fail');\n                });\n            }\n\n            /**\n             * Update the hybrid question status.\n             * @param str status The new status to display.\n             */\n            function display_hybrid_question_status(status) {\n                let e = $(\"#hybrid_status\");\n                if (e.text() != status) {\n                    e.html(status);\n                }\n            }\n\n            /**\n             * Update the exam status.\n             * @param str status The new status to display.\n             */\n            function display_qrsub_attempt_status(status) {\n                let e = $(\"#qrsub_attempt_status\");\n                if (e.text() != status) {\n                    e.html(status);\n                }\n            }\n\n        } // init()\n    };\n});\n"],"file":"attempt_status_unproctored.min.js"}